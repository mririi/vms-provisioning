- name: Create pglogical user and database
  hosts: master_nodes
  become: yes

  tasks:
    - name: Create pglogical database
      community.postgresql.postgresql_db:
        name: pglogical_db
        state: present
        login_port: 6588
      become_user: postgres

    - name: Ensure pglogical database exists
      community.postgresql.postgresql_query:
        db: postgres
        query: "SELECT 1 FROM pg_database WHERE datname = 'pglogical_db';"
        login_port: 6588
      become_user: postgres
      register: db_check
      failed_when: db_check.rowcount == 0

    - name: Create pglogical user
      community.postgresql.postgresql_user:
        name: pglogical_user
        password: "securepassword"
        role_attr_flags: "LOGIN,REPLICATION"
        state: present
        login_port: 6588
      become_user: postgres

    - name: Ensure database is ready before granting privileges
      pause:
        seconds: 5  # Ensure the database is fully available

    - name: Grant privileges on pglogical database
      community.postgresql.postgresql_privs:
        db: pglogical_db
        privs: "ALL"
        type: database
        roles: pglogical_user
        state: present
        login_port: 6588
      become_user: postgres

    - name: Create pglogical extension
      community.postgresql.postgresql_query:
        db: pglogical_db
        query: "CREATE EXTENSION IF NOT EXISTS pglogical;"
        login_port: 6588
      become_user: postgres

    - name: Grant USAGE on pglogical schema to pglogical_user
      community.postgresql.postgresql_privs:
        db: pglogical_db
        privs: "USAGE"
        type: schema
        roles: pglogical_user
        objs: pglogical
        login_port: 6588
        state: present
      become_user: postgres

    - name: Grant SELECT on all tables in pglogical schema
      community.postgresql.postgresql_privs:
        db: pglogical_db
        privs: "SELECT"
        type: table
        schema: pglogical
        roles: pglogical_user
        objs: "ALL_IN_SCHEMA"
        login_port: 6588
        state: present
      become_user: postgres

    - name: Check if primary node already exists
      community.postgresql.postgresql_query:
        db: pglogical_db
        query: "SELECT node_name FROM pglogical.node WHERE node_name = '{{ ansible_hostname }}';"
        login_port: 6588
      become_user: postgres
      register: node_check
      
    - name: Add primary node to pglogical
      community.postgresql.postgresql_query:
        db: pglogical_db
        query: |
          SELECT pglogical.create_node(
            node_name := '{{ ansible_hostname }}',
            dsn := 'host={{ master_private_ip }} port=6588 dbname=pglogical_db user=pglogical_user password=securepassword'
          );
        login_port: 6588
      become_user: postgres
      when: node_check.rowcount == 0

    # - name: Subscribe to standby 1 node
    #   community.postgresql.postgresql_query:
    #     db: pglogical_db
    #     query: |
    #       SELECT pglogical.create_subscription(
    #         subscription_name := 'subscription_{{ ansible_hostname }}',
    #         provider_dsn := 'host={{ worker1_private_ip }} port=6588 dbname=pglogical_db user=pglogical_user password=securepassword'
    #       );
    #     login_port: 6588
    #   become_user: postgres

    # - name: Subscribe to standby 2 node
    #   community.postgresql.postgresql_query:
    #     db: pglogical_db
    #     query: |
    #       SELECT pglogical.create_subscription(
    #         subscription_name := 'subscription_{{ ansible_hostname }}',
    #         provider_dsn := 'host={{ worker2_private_ip }} port=6588 dbname=pglogical_db user=pglogical_user password=securepassword'
    #       );
    #     login_port: 6588
    #   become_user: postgres