---
- name: Configure repmgr on standby (worker) nodes
  hosts: worker_nodes
  become: yes

  vars_files:
    - ../vars/repmgr.yml

  tasks:
    - name: Ensure PostgreSQL listens on all interfaces (standby)
      lineinfile:
        path: /etc/postgresql/12/main/postgresql.conf
        regexp: '^#?listen_addresses\s*=\s*.*'
        line: "listen_addresses = '*'"
        backup: yes
      notify: Restart PostgreSQL

    - name: Ensure pg_hba.conf allows repmgr from {{ network_subnet }}
      blockinfile:
        path: /etc/postgresql/12/main/pg_hba.conf
        insertafter: '^# IPv4 local connections:'
        block: |
          host  {{ repmgr_db }}   {{ repmgr_user }}  {{ network_subnet_master }}  md5
          host  replication       {{ repmgr_user }}  {{ network_subnet_master }}  md5
          host  {{ repmgr_db }}   {{ repmgr_user }}  {{ network_subnet_worker1 }}  md5
          host  replication       {{ repmgr_user }}  {{ network_subnet_worker1 }}  md5
          host  {{ repmgr_db }}   {{ repmgr_user }}  {{ network_subnet_worker2 }}  md5
          host  replication       {{ repmgr_user }}  {{ network_subnet_worker2 }}  md5
      notify: Reload PostgreSQL

    - name: Restart PostgreSQL immediately
      systemd:
        name: "{{ repmgr_service_name }}"
        state: restarted

    - name: Ensure /etc/repmgr/12 directory exists
      file:
        path: "/etc/repmgr/12"
        state: directory
        owner: postgres
        group: postgres
        mode: '0755'

    - name: Remove existing data directory to force re-clone
      file:
        path: "/var/lib/postgresql/12/main"
        state: absent
      ignore_errors: true

    - name: Place repmgr.conf on standby
      template:
        src: ../templates/repmgr.conf.j2
        dest: "{{ repmgr_config_path }}"
        owner: postgres
        group: postgres
        mode: '0644'
      vars:
        # We map inventory variables repmgr_node_id/name to node_id/name
        node_id: "{{ repmgr_node_id }}"
        node_name: "{{ repmgr_node_name }}"
        # embed the password in conninfo for demonstration
        conninfo: "host={{ ansible_host }} dbname={{ repmgr_db }} user={{ repmgr_user }} password={{ repmgr_password }}"
        config_path_for_template: "{{ repmgr_config_path }}"
        service_name: "{{ repmgr_service_name }}"

    - name: Stop PostgreSQL before cloning (if running)
      systemd:
        name: "{{ repmgr_service_name }}"
        state: stopped
      ignore_errors: true

    - name: Clone standby from master
      shell: >
        sudo -u postgres env PGPASSWORD={{ repmgr_password }}
        repmgr
        -h {{ master_host }}
        -U {{ repmgr_user }}
        -d {{ repmgr_db }}
        -f {{ repmgr_config_path }}
        standby clone
        {% if copy_ext_config | bool %} --copy-external-config-files {% endif %}
      # No 'creates:' => always re-clones

    - name: Start PostgreSQL on standby
      systemd:
        name: "{{ repmgr_service_name }}"
        state: started
        enabled: yes

    - name: Register standby node with repmgr
      shell: >
        sudo -u postgres repmgr
        -f {{ repmgr_config_path }}
        standby register
      register: standby_register
      failed_when: "standby_register.rc not in [0,1]"
      changed_when: standby_register.rc == 0

  handlers:
    - name: Restart PostgreSQL
      systemd:
        name: "{{ repmgr_service_name }}"
        state: restarted

    - name: Reload PostgreSQL
      systemd:
        name: "{{ repmgr_service_name }}"
        state: reloaded